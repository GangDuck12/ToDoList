{"version":3,"sources":["components/Subject.js","components/TOC.js","components/Content.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Subject","props","console","log","title","className","desc","type","name","value","button","onClick","e","preventDefault","onChangePage","TOC","lists","data","i","length","push","key","id","href","data-id","target","dataset","time","memo","Control","useState","setTime","action","method","onSubmit","onPagePlus","placeholder","onChange","min","max","onChangeMode","App","mode","setMode","max_content_id","setMax_content_id","seclected_content_id","setSelected_content_id","contents","setContents","_contents","_title","_desc","_button","_time","Number","concat","_mode","window","confirm","Array","from","splice","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea146c00.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n/**\r\n* @author\r\n* @function Subject\r\n**/\r\n\r\nconst Subject = (props) => {\r\n  console.log('subject render');\r\n  return(\r\n    <header>\r\n      <h1>{props.title}</h1>\r\n      <div className=\"pack\">\r\n        <p className=\"desc\">{props.desc}</p>\r\n        <p>\r\n          <input className='button' type='button' name='button' value={props.button} onClick={function(e){\r\n            e.preventDefault();\r\n            props.onChangePage();\r\n          }}></input>\r\n        </p>\r\n      </div>\r\n    </header>\r\n   )\r\n\r\n }\r\n\r\nexport default Subject","import React from 'react'\r\n\r\n/**\r\n* @author\r\n* @function TOC\r\n**/\r\n\r\nconst TOC = (props) => {\r\n  console.log('toc render');\r\n\r\n  let lists = [];\r\n  let data = props.data;\r\n  let i = 0;\r\n  while(i < data.length){\r\n    lists.push(<li key={data[i].id}><a href={'/contents/'+data[i].id} data-id={data[i].id} onClick={function(e){\r\n      e.preventDefault();\r\n      props.onChangePage(e.target.dataset.id);\r\n    }}>{data[i].title} {data[i].time}</a></li>);\r\n    i = i + 1;\r\n  }\r\n\r\n  return(\r\n    <nav>\r\n      <ul>\r\n        {lists}\r\n      </ul>\r\n    </nav>\r\n   );\r\n\r\n }\r\n\r\nexport default TOC","import React,{memo} from 'react'\r\n\r\n/**\r\n* @author\r\n* @function Content\r\n**/\r\n\r\nconst Content = (props) => {\r\n  console.log('content render');\r\n  return(\r\n    <article>\r\n      <h1>{props.title}</h1>\r\n      <p>\r\n        {props.time}\r\n      </p>\r\n      <p>\r\n        {props.desc}\r\n      </p>  \r\n    </article>\r\n   )\r\n\r\n }\r\n\r\nexport default memo(Content);","import React,{ useState } from 'react'\r\n\r\n/**\r\n* @author\r\n* @function Control\r\n**/\r\n\r\nconst Control = (props) => {\r\n\r\n    const [time,setTime] = useState('');\r\n\r\n  return(\r\n    <aside>\r\n        <h3>Please enter a schedule!!</h3>\r\n        <form action=\"/\" method=\"post\" onSubmit={function(e){\r\n            e.preventDefault();\r\n            console.log('onsubmit!!');\r\n            props.onPagePlus(\r\n                e.target.title.value,\r\n                e.target.desc.value,\r\n                e.target.time.value\r\n            );\r\n        }}>\r\n            <p><input type=\"text\" name=\"title\" placeholder=\"title\"></input></p>\r\n            <p><textarea name=\"desc\" placeholder=\"description\"></textarea></p>\r\n            <p>\r\n                <input \r\n                    name=\"time\" \r\n                    type=\"time\"\r\n                    onChange={function(e){\r\n                        setTime(e.target.value);\r\n                    }} \r\n                    value={time} \r\n                    min=\"00:00\" \r\n                    max=\"23:59\">\r\n                </input>\r\n            </p>\r\n            <p><input type=\"submit\"></input></p>\r\n            <input type=\"button\" value=\"Delete\" onClick={function(e){\r\n            e.preventDefault();\r\n            props.onChangeMode('delete');   \r\n            }}>\r\n            </input>\r\n            <p className=\"delEx\">To delete a schedule, click on the list and click the delete button.</p>\r\n        </form>\r\n    </aside>\r\n   )\r\n\r\n }\r\n\r\nexport default Control","import React,{ useState } from 'react';\nimport './App.css';\nimport Subject from './components/Subject';\nimport TOC from './components/TOC';\nimport Content from './components/Content';\nimport Control from './components/Control';\n\nfunction App() {\n  console.log('app render');\n  const [mode,setMode] = useState('view')\n  const [max_content_id,setMax_content_id] = useState(0);\n  const [seclected_content_id,setSelected_content_id] = useState();\n  const [contents,setContents] = useState([\n  ]);\n\n  let _contents = null;\n  let _title = null;\n  let _desc = null;\n  let _button = null;\n  let _time = null;\n  if(mode === 'view'){\n    _button = 'modify';\n    let i = 0;\n    while(i < contents.length){\n      let data = contents[i];\n      if(data.id === seclected_content_id){\n        _title = data.title;\n        _desc = data.desc;\n        _time = data.time;\n        break;\n      }\n\n      i = i + 1;\n    }\n    _contents = \n    <div>\n      <Subject title='To Do List' desc='Today to do' onChangePage={function(){\n        setMode('modify');\n      }} button={_button}></Subject>\n      <section>\n        <TOC data={contents} onChangePage={function(id){\n          setSelected_content_id(Number(id));\n        }}></TOC>\n        <Content title={_title} desc={_desc} time={_time}></Content>\n      </section>\n    </div>\n  }else if(mode === 'modify'){\n    _button = 'view';\n    let i = 0;\n    while(i < contents.length){\n      let data = contents[i];\n      if(data.id === seclected_content_id){\n        _title = data.title;\n        _desc = data.desc;\n        _time = data.time;\n        break;\n      }\n\n      i = i + 1;\n    }\n    _contents = \n    <div>\n      <Subject title='To Do List' desc='Today to do' onChangePage={function(){\n        setMode('view');\n      }} button={_button}></Subject>\n      <section>\n        <TOC data={contents} onChangePage={function(id){\n          setSelected_content_id(Number(id));\n        }}></TOC>\n        <Content title={_title} desc={_desc} time={_time}></Content>\n      </section>\n      <Control onPagePlus={function(_title,_desc,_time){\n        setMax_content_id(max_content_id + 1);\n        let _contents = contents.concat(\n          {id:max_content_id, title:_title, desc:_desc,time:_time }\n        );\n        setContents(_contents);\n        console.log('contents',_contents);\n      }}\n        onChangeMode={function(_mode){\n          if(_mode === 'delete'){\n            if(window.confirm('really?')){\n              let _contents = Array.from(contents);\n              let i = 0;\n              while(i < _contents.length){\n                if(_contents[i].id === seclected_content_id){\n                  _contents.splice(i,1);\n                  break;\n                }\n                i = i + 1;\n              }\n              setMode('modify');\n              setContents(_contents);\n              alert('delete!!');\n            }\n          } else{\n            setMode(_mode);\n          }\n        }}\n      >\n\n      </Control>\n    </div>\n  }\n\n  return (\n    <div className=\"App\">\n      {_contents}\n    </div>\n  );\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}